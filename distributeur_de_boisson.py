# -*- coding: utf-8 -*-
"""distributeur de boisson.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IyKiPwz0egMZHWqU_d6j_vPC1gzcMNe1

# Problématique
Le client gère des distributeurs de boissons sur des quais de gare. Un employé passe une fois par semaine recharger les machines. Cet employé indique régulièrement que la machine était vide, mais sans préciser quels produits sont vides. Le client souhaiterait estimer le manque à gagner (lorsqu'il y a rupture de stock), et te demande une analyse détaillée. Il aimerait un conseil pour savoir s'il est rentable d'envoyer ou non l'employé pour recharger les machines deux fois par semaine plutôt qu'une seule fois.

Pour cela, il te fournit l'extraction du journal automatique (le "log") des 4 distributeurs de boisson de la gare concernée. Chaque machine enregistre en effet chaque vente ou passage du technicien avec un horodatage.

Quelques compléments (tous les montants sont hors taxe, tu n'as donc pas à prendre en compte les taxes et/ou les impôts dans cette analyse) :

Le déplacement d'un employé coûte 50 euros pour aller à la gare + 20 euros par machine. Les 4 machines sont dans la même gare.
Le prix de vente des boissons est de : 1 euro le café ; 1,60 euros le soda ; 1,80 euros le nrj drink.
Le coût de revient des boissons est de : 30 cts le café ; 60 cts le soda ; 80 cts le nrj drink.
Chaque distributeur a une capacité maximale de : 280 doses de café ; 120 canettes de soda ; 60 bouteilles de nrj drink.
La gare est fermée au public une partie de la nuit.
Le coût de location de l'emplacement pour chaque machine est de 150 euros mensuels.
Les frais d'entretien de chaque machine sont de 1200 euros annuels.

# Import
"""

import numpy as np
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.ticker as plticker
from matplotlib.ticker import MaxNLocator
import matplotlib.dates as mdates
import seaborn as sns
import json
import requests

link = "https://raw.githubusercontent.com/murpi/wilddata/master/quests/beverage_dispenser.json"

r = requests.get(link)
data = json.loads( r.text)
data

df = pd.json_normalize(data['content'],
                  meta = ['date','machine','product'])
df

df.info()

"""# Convertion des dates"""

# Convertion de la colonne date en datetime
df['date']=pd.to_datetime(df['date'])
df

# Ajout d'une colonne jour de la semaine
df['day'] = df['date'].dt.day_name()
df

# Ajout d'une colonne numéro du jour de la semaine
df['num_day'] = df['date'].dt.weekday
df

# Ajout d'une colonne heure
df['hour'] = df['date'].dt.hour
df

# Convertion de la colonne date/heure en date
df['date'] = pd.to_datetime(df['date']).dt.date
df

"""# Répartition des ventes

## Par machine
"""

# Répartition des ventes par machine
vente_machine = df.loc[df['product'] != 'refill', ['machine', 'product']].value_counts().reset_index().rename(columns = {0 : 'count'})
vente_machine

plt.figure(figsize = (13,7))
sns.barplot(data = vente_machine, x = vente_machine['machine'], y = vente_machine['count'], hue = vente_machine['product'], palette = 'Blues');

"""## Par produit"""

# Répartition des ventes par produit
vente_produit = df.loc[df['product'] != 'refill', 'product'].value_counts().reset_index().rename(columns = {'product' : 'count', 'index' : 'product'})
vente_produit

plt.figure(figsize = (13,7))
sns.barplot(data = vente_produit, x = vente_produit['product'], y = vente_produit['count'], palette = 'Blues');

"""## Par jour"""

# Répartition des ventes par jour
vente_jour = df.loc[df['product'] != 'refill', ['day', 'num_day', 'product']].value_counts().reset_index().rename(columns = {0 : 'count'}).sort_values(by = 'num_day')
vente_jour

plt.figure(figsize = (13,7))
sns.barplot(data = vente_jour, x = vente_jour['day'], y = vente_jour['count'], hue = vente_jour['product'], palette = 'Blues');

"""## Par heure"""

# Répartition des ventes par heure
vente_heure = df.loc[df['product'] != 'refill', ['hour', 'product']].value_counts().reset_index().rename(columns = {0 : 'count'}).sort_values(by = 'hour')
vente_heure

plt.figure(figsize = (13,7))
sns.barplot(data = vente_heure, x = vente_heure['hour'], y = vente_heure['count'], hue = vente_heure['product'], palette = 'Blues');

"""## Par produit, par machine et par heure"""

# Répartition des ventes par produit, machine et par heure
vente = df.loc[df['product'] != 'refill'].groupby(['hour', 'product', 'machine'])[['product']].count()
vente = vente.rename(columns = {'product' : 'count'})
vente = vente.reset_index()
vente

# Ventes en fonction des heures et des machines
fig, ax = plt.subplots(figsize = (16,11))

ax1 = plt.subplot(221) 
ax1 = plt.title ('Ventes de la machine A')
ax1 = sns.lineplot(data = vente, x = vente.loc[vente['machine'] == 'A','hour'], y = vente.loc[vente['machine'] == 'A','count'], hue = vente.loc[vente['machine'] == 'A','product'])

ax2 = plt.subplot(222) 
ax2 = plt.title ('Ventes de la machine B')
ax2 = sns.lineplot(data = vente, x = vente.loc[vente['machine'] == 'B','hour'], y = vente.loc[vente['machine'] == 'B','count'], hue = vente.loc[vente['machine'] == 'B','product'])

ax3 = plt.subplot(223) 
ax3 = plt.title ('Ventes de la machine C')
ax3 = sns.lineplot(data = vente, x = vente.loc[vente['machine'] == 'C','hour'], y = vente.loc[vente['machine'] == 'C','count'], hue = vente.loc[vente['machine'] == 'C','product'])

ax4 = plt.subplot(224) 
ax4 = plt.title ('Ventes de la machine D')
ax4 = sns.lineplot(data = vente, x = vente.loc[vente['machine'] == 'D','hour'], y = vente.loc[vente['machine'] == 'D','count'], hue = vente.loc[vente['machine'] == 'D','product'])

plt.show()

"""## Par produit, par machine et par jour"""

# Répartition des ventes par produit, machine et par jour
vente1 = df.loc[df['product'] != 'refill'].groupby(['num_day', 'day', 'product', 'machine'])[['product']].count()
vente1 = vente1.rename(columns = {'product' : 'count'})
vente1 = vente1.reset_index()
vente1

# Ventes en fonction des jours et des machines
fig, ax = plt.subplots(figsize = (16,11))

ax1 = plt.subplot(221) 
ax1 = plt.title ('Ventes de la machine A')
ax1 = sns.lineplot(data = vente1, x = vente1.loc[vente1['machine'] == 'A','day'], y = vente1.loc[vente1['machine'] == 'A','count'], hue = vente1.loc[vente1['machine'] == 'A','product'])

ax2 = plt.subplot(222) 
ax2 = plt.title ('Ventes de la machine B')
ax2 = sns.lineplot(data = vente1, x = vente1.loc[vente1['machine'] == 'B','day'], y = vente1.loc[vente1['machine'] == 'B','count'], hue = vente1.loc[vente1['machine'] == 'B','product'])

ax3 = plt.subplot(223) 
ax3 = plt.title ('Ventes de la machine C')
ax3 = sns.lineplot(data = vente1, x = vente1.loc[vente1['machine'] == 'C','day'], y = vente1.loc[vente1['machine'] == 'C','count'], hue = vente1.loc[vente1['machine'] == 'C','product'])

ax4 = plt.subplot(224) 
ax4 = plt.title ('Ventes de la machine D')
ax4 = sns.lineplot(data = vente1, x = vente1.loc[vente1['machine'] == 'D','day'], y = vente1.loc[vente1['machine'] == 'D','count'], hue = vente1.loc[vente1['machine'] == 'D','product'])

plt.show()

"""# Fréquence de passage de l'employé"""

# Nombre de passages par machine
df.loc[df['product'] == 'refill', 'machine'].value_counts()

# Jour de passage de l'employé
df.loc[df['product'] == 'refill', 'day'].value_counts()

# Heure de passage de l'employé pour la machine A
df.loc[(df['product'] == 'refill') & (df['machine'] == 'A'), 'hour'].value_counts()

# Heure de passage de l'employé pour la machine B
df.loc[(df['product'] == 'refill') & (df['machine'] == 'B'), 'hour'].value_counts()

# Heure de passage de l'employé pour la machine C
df.loc[(df['product'] == 'refill') & (df['machine'] == 'C'), 'hour'].value_counts()

# Heure de passage de l'employé pour la machine D
df.loc[(df['product'] == 'refill') & (df['machine'] == 'D'), 'hour'].value_counts()

"""# Identification des ruptures de stock

## Par visualisation des ventes
"""

def carte_vente(produit, machine) :
    data = df.loc[(df['product'] == produit) & (df['machine'] == machine), ['num_day', 'day','hour']].value_counts().reset_index().rename(columns = {0 : 'count'}).sort_values(by = 'num_day')
    data = pd.pivot_table(data, values='count', index=['day', 'num_day'], columns=['hour'], aggfunc='sum', fill_value=0)
    data = data.sort_values(by = 'num_day')
    plt.figure(figsize = (15, 5))
    plt.title('Vente de '+produit+' de la machine '+machine)
    sns.heatmap(data, linewidth=0.3, cmap = 'Blues')
    print(end = "")
    plt.show()
    return

produit = ['coffee', 'soda', 'nrj']
machine = ['A', 'B', 'C', 'D']
for i in machine :
    for j in produit : 
        carte_vente(j,i)

"""## Par calcul du stock restant"""

def rupture_stock(produit, stock_max, machine) :

    # Définition du dataframe pour chaque machine et chaque produit
    df1= df.loc[((df['product'] == produit) | (df['product'] == 'refill')) & (df['machine'] == machine)].groupby(['date', 'hour', 'product']).count().rename(columns = {'machine' : 'count'}).reset_index()

    # Mise à zéro de la colonne product quand il y a un refill
    df1.loc[df1['product'] == 'refill', 'count'] = 0

    # Calcul du stock restant
    stock = 0
    liste = []
    for index, row in df1.iterrows():
        if stock >=  row['count'] and row['product'] != 'refill' :
            stock -= row['count']
            liste.append(stock)
        else :
            stock = stock_max - row['count']
            liste.append(stock)

    df1 = pd.concat([df1,pd.DataFrame(liste, columns = ['stock'])], axis = 1)

    # Mise en forme de la date pour l'affichage du graphique
    df1['date'] = pd.to_datetime(df1['date'])
    df1['day'] = df1['date'].dt.day_name()
    df1['day_date'] = df1['day'].astype(str) +'  '+ df1['date'].astype(str) + ' /' + df1['hour'].astype(str)

    #Graphique
    fig, ax = plt.subplots(figsize = (30,15))
    plt.title('Stock de '+produit+' de la machine '+machine)
    sns.barplot(data = df1, x = df1['day_date'], y = df1['stock'])
    ax.set_xlim(df1.index[0], df1.index[-1])
    plt.xticks(df1.index, df1['day_date'][::2], rotation='vertical')
    plt.locator_params(axis='x', nbins=len(df1)/2)
    plt.grid(True)
    print(end = "")
    plt.show()

    return

machine = ['A', 'B', 'C', 'D']
produit = ['coffee', 'nrj', 'soda']
stock = [280, 60, 120]

for i in machine :
    for j in produit : 
        if j == 'coffee' :
            rupture_stock(j,stock[0], i)
        elif j == 'nrj' :
            rupture_stock(j,stock[1], i)
        else :
            rupture_stock(j,stock[2], i)

"""# Calcul des coûts

## Estimation des ventes
"""

def ca_achat_estimé(produit, machine, prix_vente, prix_achat) :
    # Compte le nombre de vente par jour de chaque produit d'une machine
    df_vente = df.loc[(df['product'] == produit) & (df['machine'] == machine)].drop(columns = ['day', 'num_day', 'machine']).groupby(['date', 'product']).count().reset_index().rename(columns = {'hour' : 'count'})

    # Ajout des dates où il y a rupture et estimation des ventes par la moyenne
    date_manquante = pd.date_range(min(df['date']),max(df['date'])).difference(df_vente['date'])
    for date in date_manquante :
        df_vente = df_vente.append({'date' : date, 'product' : produit, 'count' : round(df_vente['count'].mean())}, ignore_index = True)

    df_vente['date'] = pd.to_datetime(df_vente['date'])
    df_vente.sort_values(by = 'date', inplace = True)

    # Calcul du prix de vente total estimé
    df_vente['CA'] = df_vente['count'] * prix_vente
    ca = df_vente['CA'].sum()

    # calcul du prix d'achat total estimé
    df_vente['achat'] = df_vente['count'] * prix_achat
    cout = df_vente['achat'].sum()
    
    return (ca, cout)

machine = ['A', 'B', 'C', 'D']
produit = ['coffee', 'nrj', 'soda']
prix_vente = [1, 1.80, 1.60]
prix_achat = [0.30, 0.80, 0.60]
ca = 0
achat = 0

for i in machine :
    for j in produit : 
        if j == 'coffee' :
            ca += ca_achat_estimé(j,i,prix_vente[0],prix_achat[0])[0]
            achat += ca_achat_estimé(j,i,prix_vente[0],prix_achat[0])[1]
        elif j == 'nrj' :
            ca += ca_achat_estimé(j,i,prix_vente[1],prix_achat[1])[0]
            achat += ca_achat_estimé(j,i,prix_vente[1],prix_achat[1])[1]
        else :
            ca += ca_achat_estimé(j,i,prix_vente[2],prix_achat[2])[0]
            achat += ca_achat_estimé(j,i,prix_vente[2],prix_achat[2])[1]
print('Le CA estimé pour les 6 semaines est de : ',ca,' euros.')
print('Le prix d\'achat estimé pour les 6 semaines est de : ',achat,' euros.')

"""## Coût de revient actuel"""

def prix_achat(produit, machine, prix) :
    # Définition du dataframe pour chaque machine et chaque produit pour les 6 semaines
    df_cout= df.loc[(df['product'] == produit) & (df['machine'] == machine)].groupby(['date']).count().rename(columns = {'product' : 'count'}).reset_index()
    df_cout = df_cout.drop(columns = ['machine', 'day', 'num_day', 'hour'])
    df_cout['prix_achat'] = df_cout['count'] * prix
    cout = df_cout['prix_achat'].sum()
    return cout

machine = ['A', 'B', 'C', 'D']
produit = ['coffee', 'nrj', 'soda']
prix = [0.30, 0.80, 0.60]
cout = 0

for i in machine :
    for j in produit : 
        if j == 'coffee' :
            cout += prix_achat(j,i,prix[0])
        elif j == 'nrj' :
            cout += prix_achat(j,i,prix[1])
        else :
            cout += prix_achat(j,i,prix[2])
print('Le total des achats pour les 6 semaines est de : ',cout,' euros.')

# coût de location : 150/mois par machine, par mois
# total pour 6 semaines, pour 4 machines
location = ((150/4)*6) * 4

# coût d'entretien : 1200/an par machine, par an
entretien = ((1200/52) * 6) *4

# coût de déplacement de l'employé : 50/semaine + 20/machine
employe = (50 * 6) + ((20 *4) * 6)

# Coût de revient pour les 6 semaines
cout_revient = cout + location + entretien + employe

print('Le prix de revient d\'un passage pour les 6 semaines est de : ',round(cout_revient,2),' euros.')

"""## Cout de revient pour un second passage"""

# Prends en compte le cout des ventes estimées et le cout de l'employé
cout_revient2 = achat + location + entretien + (employe * 2)

print('Le prix de revient de 2 passages pour les 6 semaines est de : ',round(cout_revient2,2),' euros.')